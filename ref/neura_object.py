"""This file contains data related to neura objects."""
import os
import mmcv
import os.path as osp

import numpy as np
from pathlib import Path
cur_dir = Path(osp.dirname(osp.abspath(__file__)))
PROJ_ROOT = cur_dir.parent
output_dir = osp.join(PROJ_ROOT, "output")

data_root = osp.join(PROJ_ROOT, "data")
bop_root = osp.join(data_root, "BOP_DATASETS/")

# ---------------------------------------------------------------- #
# NEURA OBJECT
# ---------------------------------------------------------------- #
object_name = "neura_objects"
dataset_root = osp.join(bop_root, object_name)

model_dir = osp.join(dataset_root, "models")
vertex_scale = 0.001

# id2obj is important as 
# name of the ply models according to the id of the dictionary id2obj
id2obj = {
    1: "japanese_bell",
    2: "supermarket_pringles",
    3: "supermarket_schoko_nuss",
    4: "wuerth_color_powder",
    5: "wuerth_duct_tape",

}
objects = list(id2obj.values())

obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

model_paths = model_eval_dir = [str(f) for f in sorted(list(Path(model_dir).rglob("obj_*.ply")))]
texture_paths = [str(f) for f in sorted(list(Path(model_dir).rglob("obj_*.png")))]
model_colors = [((i + 1) * 10, (i + 1) * 10, (i + 1) * 10) for i in range(obj_num)]  # for renderer

# diameter information can be found in objects_info.yaml
diameters = (
    np.array(
        [169.180,
         265.230,
         190.192,
         221.464,
         134.623]
        )
)


width = 640
height = 480
zNear = 0.25
zFar = 6.0
center = (height / 2, width / 2)

camera_matrix = np.array([[528.466,     0.,      325.0393,],
                         [0.,      530.59326,    240.08675],
                         [0,            0,         1]])
# depth_factor = 10000.0


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "objects_info.yaml")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info

# VERY IMPORTANT TO RUN THIS
def get_fps_points():
    """key is str(obj_id) generated by
    core/gdrn_modeling/tools/neura_object/neura_object_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict
